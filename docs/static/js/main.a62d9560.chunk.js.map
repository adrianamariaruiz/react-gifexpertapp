{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cates","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OAII,aAHA,CAGA,QAAMC,SAlBW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAYf,SACK,uBACEO,KAAK,OACLC,MAAOT,EACPU,SA1Bc,SAAEP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QC0FHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,EChEwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAfAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAECH,EAAS,CACNf,KAAMkB,EACNL,SAAS,SAKxB,CAACpB,IAGGqB,ED0C0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAIzB,OACE,qCACG,oBAAIJ,UAAW,wCAAf,SAAwDhB,IAEvDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAESH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEOA,GADEA,EAAIC,aE5ChBgB,EAAe,WAE1B,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAIA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAGQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEEA,SAAYA,GADPA,Y,MChF1B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a62d9560.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    //e de evento\r\n    const handleInputChange= ( e ) => {\r\n        setinputValue( e.target.value );\r\n    } \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //para prevenir el comportamiento por dfecto del form\r\n        \r\n        //el if es para poner la condicion de que tienen que escribir algo en recuadro del input, que si esta vacio no permita ingresar el vacio a la lista\r\n        if(inputValue.trim().length > 2){\r\n         setCategories(cates => [ inputValue, ...cates ]);  \r\n         setinputValue(''); \r\n        }\r\n\r\n        // console.log('submit hecho')\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        //el form es un agrupador por lo que no necesito meterlo en fragmentos <></>\r\n        //el form tiene un comportamiento por defecto que es que cuando uno unde enter es como si refrescara la pagina y eso ya no se usa, para prevenir este comportamiento le pongo: form onSubmit={handleSubmit}\r\n        //el primer argumento del onSubmit es el e \r\n        <form onSubmit={handleSubmit}>\r\n             <input \r\n               type=\"text\"\r\n               value={inputValue}\r\n               onChange={handleInputChange}\r\n            />\r\n        </form>\r\n           \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n//async me regresa una promesa que resuelve la coleccion de mis imagenes\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=oSN5mJl71J1qIq1ezrCElSOPi41oPZfc`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    \r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    // console.log({id, title, url})\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n"," \r\n// import React, { useState, useEffect } from 'react';\r\n// import { getGifs } from '../helpers/getGifs';\r\n// import { GifGridItem } from './GifGridItem';\r\n\r\n\r\n// export const GifGrid = ({ category }) => {\r\n\r\n//     // const [count, setCount] = useState(0);\r\n    \r\n//     const [images, setImages] = useState([])\r\n\r\n//     //este lo modeifique (importe) cuando pase todo para getGifs.js\r\n//     // useEffect( ()=> {\r\n//     //     getGifs();\r\n//     // }, [])\r\n\r\n//     useEffect( ()=> {\r\n//         getGifs( category )\r\n//             .then(setImages);\r\n//     }, [category])\r\n//     //como el getGifs retorna una promesa puedo usar el .then\r\n//     //getGifs( category ).then(img => setImages(img)); es exactamente igual a esto: getGifs( category ).then(setImages);\r\n//     //si pongo entre [category] es, si la category cambia me vuelve a disparar la peticion http\r\n//     //si mando el array vacio el useEffect solo se dispara una unica vez\r\n\r\n    \r\n//     //los de aca abajo lo comente cuando lo pase para gitGif.js\r\n//     // const getGifs = async() => {\r\n\r\n//     //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=oSN5mJl71J1qIq1ezrCElSOPi41oPZfc`\r\n//     //     const resp = await fetch( url );\r\n//     //     const {data} = await resp.json();\r\n\r\n//     //     const gifs = data.map( img => {\r\n//     //         return {\r\n//     //             id: img.id,\r\n//     //             title: img.title,\r\n//     //             url: img.images.downsized_medium.url\r\n//     //         }\r\n//     //     })\r\n\r\n//     //     console.log(gifs);\r\n//     //     setImages(gifs);\r\n\r\n//     // }\r\n\r\n\r\n\r\n\r\n\r\n//     // getGifs(); \r\n//     //el getGif() lo quito de aca para ponerlo en el useEffect y evitar que se renderice cada vez que se presiona el boton\r\n    \r\n// //     return (\r\n// //         <>    \r\n// //           <h3>{category}</h3>  \r\n// //           {/* <h3>{count}</h3>\r\n// //           <button onClick= { ()=> setCount(count + 1)}></button>  */}\r\n// //           <ol>\r\n// //               {\r\n// //                   images.map(img => (\r\n// //                       <li key={img.id}>{img.title}</li>\r\n// //                   ))\r\n// //               }\r\n// //           </ol>\r\n// //         </>\r\n// //     )\r\n// // }\r\n\r\n// return (\r\n//   <> \r\n//      <h3>{category}</h3>  \r\n\r\n//      <div className=\"card-grid\">    \r\n     \r\n//           {\r\n//               images.map(img => (\r\n//                   <GifGridItem \r\n//                      key= {img.id}\r\n//                      {...img}\r\n//                   />   \r\n//               ))\r\n//           }\r\n      \r\n//     </div>\r\n//   </> \r\n// )\r\n// }\r\n\r\n\r\n\r\n// custom hook\r\n \r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const state = useFetchGifs();\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    //en una desestructuracion puedo renombrar una propiedad asi: data: images, y asi ya no se llama data sino images\r\n\r\n\r\nreturn (\r\n  <> \r\n     <h3 className= \"animate__animated animate__fadeInDown\">{category}</h3>  \r\n\r\n     {loading && <p className=\"animate__animated animate__flash\">loading</p>}\r\n\r\n     <div className=\"card-grid\">    \r\n          {\r\n              images.map(img => (\r\n                  <GifGridItem \r\n                     key= {img.id}\r\n                     {...img}\r\n                  />   \r\n              ))\r\n          }\r\n      \r\n     </div>\r\n\r\n  </> \r\n)\r\n}","import {useState, useEffect} from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\n\r\n// export const useFetchGifs = ( category ) => {\r\n//     const [state, setState] = useState({\r\n//         data: [],\r\n//         loading: true\r\n\r\n//     });\r\n\r\n//     useEffect(() => {\r\n\r\n//         getGifs(category)\r\n//             .then(imgs => {\r\n\r\n//                setTimeout(() => {\r\n                   \r\n//                    setState({\r\n//                       data: imgs,\r\n//                       loading: false\r\n//                    })\r\n              \r\n//                 }, 3000); \r\n            \r\n//     })\r\n    \r\n//     }, [category]);\r\n\r\n\r\n//     return state;\r\n\r\n// }\r\n\r\n\r\n\r\n\r\n//sin el setTimeout para no demorar la carga, pero se pierde el loading y data cargada con los efectos que le puse:\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                   setState({\r\n                      data: imgs,\r\n                      loading: false\r\n                   })\r\n\r\n    })\r\n    \r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n\r\n}","\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n// export const GifExpertApp = () => {\r\n\r\n//     const [categories, setCategories] = useState(['Dragon Ball', 'Sailor Moon', 'Ranma']);\r\n\r\n//     const handleAdd = () => {\r\n//         setCategories([...categories, 'Candy']); //con el ...categories mantengo el array existente y ahi si se le puede agregar otra cosa\r\n//         //si quiero que Candy quede al inicio (de primera en la lista) lo pongo asi: ['Candy', ...categories]\r\n//         //tambien se puede usando un callback asi: setCategories(cates => [...cates, 'Candy']);\r\n//     }\r\n\r\n//     return (\r\n//       <>\r\n//         <h2>GifExpertApp</h2>\r\n//         <hr/>\r\n\r\n//         <button onClick={handleAdd}>Agregar</button>\r\n\r\n//         <ol>\r\n\r\n//             {\r\n//                 categories.map(category => {\r\n//                     return <li key={ category }>{ category }</li>\r\n//                 })\r\n//             }\r\n\r\n//         </ol>\r\n\r\n//       </>\r\n//     )\r\n  \r\n//   }\r\n\r\n\r\n\r\n\r\n  // export const GifExpertApp = () => {\r\n\r\n  //   const [categories, setCategories] = useState(['Dragon Ball', 'Sailor Moon', 'Ranma']);\r\n\r\n    \r\n\r\n  //   return (\r\n  //     <>\r\n  //       <h2>GifExpertApp</h2>\r\n  //       <AddCategory setCategories={setCategories}/>\r\n  //       <hr/>\r\n\r\n  //       <ol>\r\n\r\n  //           {\r\n  //               categories.map(category => {\r\n  //                   return <li key={ category }>{ category }</li>\r\n  //               })\r\n  //           }\r\n\r\n  //       </ol>\r\n\r\n  //     </>\r\n  //   )\r\n  \r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n  export const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Sailor Moon']);\r\n\r\n    \r\n\r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n\r\n        <ol>\r\n\r\n            {\r\n                categories.map(category => (\r\n                   <GifGrid \r\n                     key={category}\r\n                     category = {category}/>\r\n                ))\r\n            }\r\n  \r\n\r\n        </ol>\r\n\r\n      </>\r\n    )\r\n}\r\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}